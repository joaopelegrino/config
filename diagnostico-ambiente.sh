#!/bin/bash

# Script de diagn√≥stico completo do ambiente WSL
set -e

CONFIG_DIR="$HOME/config"
WORKSPACE_DIR="$HOME/workspace"

echo "========================================="
echo "üîç Diagn√≥stico do Ambiente WSL"
echo "========================================="
echo "Data: $(date)"
echo "Usu√°rio: $USER"
echo "Diret√≥rio atual: $(pwd)"
echo ""

# Fun√ß√£o para verificar se um comando existe
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Fun√ß√£o para verificar links simb√≥licos
check_symlink() {
    local file="$1"
    local description="$2"
    
    if [ -L "$file" ]; then
        local target=$(readlink "$file")
        echo "‚úÖ $description: $file ‚Üí $target"
        if [ ! -e "$target" ]; then
            echo "   ‚ö†Ô∏è  Alvo do link n√£o existe!"
        fi
    elif [ -e "$file" ]; then
        echo "‚ö†Ô∏è  $description: $file existe mas n√£o √© um link simb√≥lico"
    else
        echo "‚ùå $description: $file n√£o encontrado"
    fi
}

echo "## 1. Verifica√ß√£o do Sistema"
echo "WSL Version: $(cat /proc/version | grep -o "WSL[0-9]*")"
echo "Kernel: $(uname -r)"
echo "Distribui√ß√£o: $(lsb_release -d | cut -f2)"
echo "Arquitetura: $(uname -m)"
echo ""

echo "## 2. Links Simb√≥licos dos Dotfiles"
check_symlink "$HOME/.bashrc" "Bashrc"
check_symlink "$HOME/.gitconfig" "Git Config"
check_symlink "$HOME/.profile" "Profile"
check_symlink "$HOME/.vimrc" "Vimrc"
check_symlink "$HOME/.vim" "Vim Directory"
check_symlink "$HOME/.fzf.zsh" "FZF Zsh"
check_symlink "$HOME/.fzf.bash" "FZF Bash"
echo ""

echo "## 3. Estrutura de Diret√≥rios"
echo "üìÅ Estrutura do Config:"
if [ -d "$CONFIG_DIR" ]; then
    echo "‚úÖ $CONFIG_DIR existe"
    echo "   Arquivos: $(ls -1 $CONFIG_DIR | wc -l)"
    ls -la "$CONFIG_DIR" | head -10
else
    echo "‚ùå $CONFIG_DIR n√£o encontrado"
fi
echo ""

echo "üìÅ Estrutura do Workspace:"
if [ -d "$WORKSPACE_DIR" ]; then
    echo "‚úÖ $WORKSPACE_DIR existe"
    echo "   Subdiret√≥rios: $(find $WORKSPACE_DIR -maxdepth 1 -type d | wc -l)"
    ls -la "$WORKSPACE_DIR"
else
    echo "‚ùå $WORKSPACE_DIR n√£o encontrado"
fi
echo ""

echo "## 4. Ferramentas de Desenvolvimento"
tools=(
    "git:Git"
    "vim:Vim"
    "node:Node.js"
    "python3:Python3"
    "gcc:GCC"
    "cmake:CMake"
    "docker:Docker"
)

for tool_desc in "${tools[@]}"; do
    tool="${tool_desc%%:*}"
    desc="${tool_desc##*:}"
    
    if command_exists "$tool"; then
        version=$($tool --version 2>/dev/null | head -1 | cut -d' ' -f1-3)
        echo "‚úÖ $desc: $version"
    else
        echo "‚ùå $desc n√£o encontrado"
    fi
done
echo ""

echo "## 5. Configura√ß√£o do VSCode"
if [ -d "$WORKSPACE_DIR/.vscode" ]; then
    echo "‚úÖ Diret√≥rio .vscode existe"
    echo "   Arquivos de configura√ß√£o:"
    ls -la "$WORKSPACE_DIR/.vscode"
    
    # Verificar tasks.json
    if [ -f "$WORKSPACE_DIR/.vscode/tasks.json" ]; then
        echo "‚úÖ tasks.json configurado"
        echo "   Tarefas definidas: $(grep -c "\"label\"" "$WORKSPACE_DIR/.vscode/tasks.json")"
    else
        echo "‚ùå tasks.json n√£o encontrado"
    fi
    
    # Verificar settings.json
    if [ -f "$WORKSPACE_DIR/.vscode/settings.json" ]; then
        echo "‚úÖ settings.json configurado"
    else
        echo "‚ùå settings.json n√£o encontrado"
    fi
else
    echo "‚ùå Diret√≥rio .vscode n√£o encontrado em $WORKSPACE_DIR"
fi
echo ""

echo "## 6. Plugins do Vim"
if [ -d "$HOME/.vim/plugged" ]; then
    echo "‚úÖ Diret√≥rio de plugins existe"
    plugin_count=$(ls -1 "$HOME/.vim/plugged" | wc -l)
    echo "   Plugins instalados: $plugin_count"
    ls -1 "$HOME/.vim/plugged" | head -5
    [ $plugin_count -gt 5 ] && echo "   ... e mais $(($plugin_count - 5)) plugins"
else
    echo "‚ùå Diret√≥rio de plugins n√£o encontrado"
fi
echo ""

echo "## 7. Integra√ß√£o com Windows Terminal"
echo "üìÑ Configura√ß√µes do Windows Terminal:"
if [ -f "$CONFIG_DIR/windows-terminal-settings.json" ]; then
    echo "‚úÖ Arquivo de configura√ß√£o encontrado"
    
    # Verificar perfil WSL
    if grep -q "Ubuntu WSL" "$CONFIG_DIR/windows-terminal-settings.json"; then
        echo "‚úÖ Perfil Ubuntu WSL configurado"
    else
        echo "‚ö†Ô∏è  Perfil Ubuntu WSL n√£o encontrado na configura√ß√£o"
    fi
    
    # Verificar startingDirectory
    if grep -q "//wsl\$/Ubuntu/home" "$CONFIG_DIR/windows-terminal-settings.json"; then
        echo "‚úÖ Diret√≥rio inicial WSL configurado"
    else
        echo "‚ö†Ô∏è  Diret√≥rio inicial WSL n√£o configurado corretamente"
    fi
    
    # Verificar fonte Nerd Font
    if grep -q "Hack Nerd Font" "$CONFIG_DIR/windows-terminal-settings.json"; then
        echo "‚úÖ Fonte Nerd Font configurada"
    else
        echo "‚ö†Ô∏è  Fonte Nerd Font n√£o configurada"
    fi
else
    echo "‚ùå Arquivo de configura√ß√£o do Windows Terminal n√£o encontrado"
fi
echo ""

echo "## 8. Configura√ß√µes do VSCode para WSL"
echo "üìÑ Configura√ß√µes VSCode:"
if [ -f "$CONFIG_DIR/vscode-settings.json" ]; then
    echo "‚úÖ Arquivo de configura√ß√£o encontrado"
    
    # Verificar configura√ß√µes WSL espec√≠ficas
    if grep -q "wsl.localhost" "$CONFIG_DIR/vscode-settings.json"; then
        echo "‚úÖ Configura√ß√£o de UNC hosts para WSL encontrada"
    else
        echo "‚ö†Ô∏è  Configura√ß√£o de UNC hosts para WSL n√£o encontrada"
    fi
    
    # Verificar execu√ß√£o em WSL
    if grep -q "executeInWSL.*true" "$CONFIG_DIR/vscode-settings.json"; then
        echo "‚úÖ Execu√ß√£o de containers em WSL configurada"
    else
        echo "‚ö†Ô∏è  Execu√ß√£o de containers em WSL n√£o configurada"
    fi
    
    # Verificar terminal font
    if grep -q "Hack Nerd Font" "$CONFIG_DIR/vscode-settings.json"; then
        echo "‚úÖ Fonte do terminal configurada"
    else
        echo "‚ö†Ô∏è  Fonte do terminal n√£o configurada"
    fi
else
    echo "‚ùå Arquivo de configura√ß√£o do VSCode n√£o encontrado"
fi
echo ""

echo "## 9. Testes de Funcionalidade"
echo "üß™ Testando funcionalidades b√°sicas:"

# Testar FZF
if [ -f "$HOME/.fzf/bin/fzf" ]; then
    echo "‚úÖ FZF instalado e dispon√≠vel"
    echo "   Vers√£o: $($HOME/.fzf/bin/fzf --version)"
else
    echo "‚ùå FZF n√£o dispon√≠vel"
fi

# Testar Vim com plugins
if command_exists vim; then
    echo "‚úÖ Vim dispon√≠vel"
    if vim --cmd 'echo "Vim funcionando"' --cmd 'qall!' >/dev/null 2>&1; then
        echo "‚úÖ Vim inicializa corretamente"
    else
        echo "‚ö†Ô∏è  Vim tem problemas na inicializa√ß√£o"
    fi
else
    echo "‚ùå Vim n√£o dispon√≠vel"
fi

echo ""

echo "## 10. Resumo de Status"
echo "========================================="
echo "üìä Resumo do Diagn√≥stico:"
echo ""

# Contar sucessos
success_count=0
total_checks=20

[ -L "$HOME/.bashrc" ] && ((success_count++))
[ -L "$HOME/.gitconfig" ] && ((success_count++))
[ -L "$HOME/.vimrc" ] && ((success_count++))
[ -L "$HOME/.vim" ] && ((success_count++))
[ -d "$CONFIG_DIR" ] && ((success_count++))
[ -d "$WORKSPACE_DIR" ] && ((success_count++))
[ -d "$WORKSPACE_DIR/.vscode" ] && ((success_count++))
[ -f "$WORKSPACE_DIR/.vscode/tasks.json" ] && ((success_count++))
[ -f "$WORKSPACE_DIR/.vscode/settings.json" ] && ((success_count++))
[ -d "$HOME/.vim/plugged" ] && ((success_count++))
command_exists git && ((success_count++))
command_exists vim && ((success_count++))
command_exists node && ((success_count++))
command_exists python3 && ((success_count++))
command_exists gcc && ((success_count++))
[ -f "$HOME/.fzf/bin/fzf" ] && ((success_count++))
[ -f "$CONFIG_DIR/windows-terminal-settings.json" ] && ((success_count++))
[ -f "$CONFIG_DIR/vscode-settings.json" ] && ((success_count++))
grep -q "Ubuntu WSL" "$CONFIG_DIR/windows-terminal-settings.json" 2>/dev/null && ((success_count++))
grep -q "wsl.localhost" "$CONFIG_DIR/vscode-settings.json" 2>/dev/null && ((success_count++))

percentage=$((success_count * 100 / total_checks))

echo "‚úÖ Configura√ß√µes funcionais: $success_count/$total_checks ($percentage%)"
echo ""

if [ $percentage -ge 90 ]; then
    echo "üéâ Ambiente est√° bem configurado!"
elif [ $percentage -ge 70 ]; then
    echo "‚ö†Ô∏è  Ambiente parcialmente configurado. Algumas melhorias necess√°rias."
else
    echo "‚ùå Ambiente precisa de configura√ß√£o adicional."
fi

echo ""
echo "## Para resolver problemas:"
echo "1. Execute: source ~/.bashrc"
echo "2. Reinstale plugins do Vim: vim +PlugInstall +qall"
echo "3. Verifique configura√ß√µes do Windows Terminal"
echo "4. Sincronize dotfiles: cd ~/config && git pull"
echo ""
echo "========================================="
echo "üèÅ Diagn√≥stico conclu√≠do!"
echo "========================================="
