#!/bin/bash

# üîç Script de Diagn√≥stico Vim - Status da Configura√ß√£o
# Autor: Sistema de configura√ß√µes centralizadas
# Data: 06/08/2025

echo "üîç DIAGN√ìSTICO VIM - Status da Configura√ß√£o"
echo "=" $(printf '%.0s' {1..50})

# Cores para output
GREEN='\033[0;32m'
RED='\033[0;31m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

print_status() {
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}‚úÖ $1${NC}"
    else
        echo -e "${RED}‚ùå $1${NC}"
    fi
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

echo
echo "üìã 1. VERIFICA√á√ïES B√ÅSICAS"
echo "-" $(printf '%.0s' {1..30})

# Verificar se Vim est√° instalado
vim --version > /dev/null 2>&1
print_status "Vim instalado e funcionando"

# Vers√£o do Vim
VIM_VERSION=$(vim --version | head -1 | cut -d' ' -f5)
print_info "Vers√£o: $VIM_VERSION"

# Verificar configura√ß√£o centralizada
if [ -L ~/.vimrc ]; then
    print_status "Link simb√≥lico ~/.vimrc configurado"
    VIMRC_TARGET=$(readlink ~/.vimrc)
    print_info "Aponta para: $VIMRC_TARGET"
else
    print_warning "Link simb√≥lico ~/.vimrc n√£o encontrado"
fi

echo
echo "üìÅ 2. ESTRUTURA DE DIRET√ìRIOS"
echo "-" $(printf '%.0s' {1..30})

# Diret√≥rio .vim
if [ -d ~/.vim ]; then
    print_status "Diret√≥rio ~/.vim existe"
else
    print_warning "Diret√≥rio ~/.vim n√£o encontrado"
fi

# Diret√≥rio undodir
if [ -d ~/.vim/undodir ]; then
    print_status "Undo persistente configurado"
    UNDO_FILES=$(ls ~/.vim/undodir | wc -l)
    print_info "Arquivos de undo: $UNDO_FILES"
else
    print_warning "Diret√≥rio undodir n√£o encontrado"
fi

# Diret√≥rio spell
if [ -d ~/.vim/spell ]; then
    print_status "Diret√≥rio spell existe"
    SPELL_FILES=$(ls ~/.vim/spell | wc -l)
    print_info "Arquivos de spell: $SPELL_FILES"
else
    print_warning "Diret√≥rio spell n√£o encontrado"
fi

echo
echo "üîå 3. SISTEMA DE PLUGINS"
echo "-" $(printf '%.0s' {1..30})

# Plugin manager
if [ -f ~/.vim/autoload/plug.vim ]; then
    print_status "vim-plug instalado"
else
    print_warning "vim-plug n√£o encontrado"
fi

# Diret√≥rio de plugins
if [ -d ~/.vim/plugged ]; then
    PLUGIN_COUNT=$(ls ~/.vim/plugged | wc -l)
    print_status "$PLUGIN_COUNT plugins detectados em ~/.vim/plugged"
    
    # Listar plugins encontrados
    print_info "Plugins instalados:"
    for plugin in ~/.vim/plugged/*/; do
        if [ -d "$plugin" ]; then
            plugin_name=$(basename "$plugin")
            echo "    - $plugin_name"
        fi
    done
else
    print_warning "Diret√≥rio ~/.vim/plugged n√£o encontrado"
fi

# Verificar se plugins s√£o carregados no vimrc
if grep -q "call plug#begin" ~/.vimrc 2>/dev/null; then
    print_status "Plugin manager ativo no vimrc"
else
    print_warning "Plugin manager N√ÉO ativo no vimrc"
fi

echo
echo "‚öôÔ∏è 4. CONFIGURA√á√ïES PRINCIPAIS"
echo "-" $(printf '%.0s' {1..30})

# Tamanho do vimrc
if [ -f ~/.vimrc ]; then
    VIMRC_SIZE=$(wc -l < ~/.vimrc)
    print_status "vimrc carregado ($VIMRC_SIZE linhas)"
else
    print_warning "Arquivo vimrc n√£o encontrado"
fi

# Verificar configura√ß√µes chave
if grep -q "set termguicolors" ~/.vimrc 2>/dev/null; then
    print_status "True color configurado"
fi

if grep -q "set undofile" ~/.vimrc 2>/dev/null; then
    print_status "Undo persistente ativo"
fi

if grep -q "colorscheme" ~/.vimrc 2>/dev/null; then
    COLORSCHEME=$(grep "colorscheme" ~/.vimrc | grep -v "^\s*\"" | tail -1 | cut -d' ' -f2)
    print_status "Tema configurado: $COLORSCHEME"
fi

if grep -q "statusline" ~/.vimrc 2>/dev/null; then
    print_status "Statusline personalizada"
fi

echo
echo "üß™ 5. TESTES FUNCIONAIS"
echo "-" $(printf '%.0s' {1..30})

# Teste b√°sico de carregamento
vim -c 'echo "Test OK"' -c 'q' > /dev/null 2>&1
print_status "Carregamento b√°sico do Vim"

# Teste de syntax highlighting
vim -c 'syntax on' -c 'q' > /dev/null 2>&1
print_status "Syntax highlighting funcional"

# Teste de colorscheme
vim -c "colorscheme $COLORSCHEME" -c 'q' > /dev/null 2>&1
if [ $? -eq 0 ]; then
    print_status "Tema carrega sem erros"
else
    print_warning "Problema com tema $COLORSCHEME"
fi

echo
echo "üìä 6. ESTAT√çSTICAS"
echo "-" $(printf '%.0s' {1..30})

# Configura√ß√£o centralizada
print_info "Localiza√ß√£o: /home/joao/config/vimrc"

# Espa√ßo ocupado
VIM_SIZE=$(du -sh ~/.vim 2>/dev/null | cut -f1)
print_info "Espa√ßo ocupado: $VIM_SIZE"

# √öltima modifica√ß√£o do vimrc
if [ -f ~/.vimrc ]; then
    LAST_MODIFIED=$(stat -c %y ~/.vimrc | cut -d' ' -f1)
    print_info "√öltima modifica√ß√£o: $LAST_MODIFIED"
fi

echo
echo "üéØ 7. RECOMENDA√á√ïES"
echo "-" $(printf '%.0s' {1..30})

# Verificar se plugins est√£o ativos
if [ -d ~/.vim/plugged ] && ! grep -q "call plug#begin" ~/.vimrc 2>/dev/null; then
    echo -e "${RED}‚ùó CR√çTICO: Plugins instalados mas n√£o carregados${NC}"
    echo -e "${YELLOW}   Solu√ß√£o: Adicionar configura√ß√£o vim-plug ao vimrc${NC}"
    echo -e "${BLUE}   Consulte: /home/joao/config/vim-README.md${NC}"
fi

# Verificar vers√£o do Vim
VIM_MAJOR=$(echo $VIM_VERSION | cut -d'.' -f1)
if [ "$VIM_MAJOR" -lt 8 ]; then
    echo -e "${YELLOW}   Recomenda√ß√£o: Atualizar Vim para vers√£o 8.0+${NC}"
fi

# Sugest√µes gerais
echo -e "${GREEN}‚ú® Para melhorar a configura√ß√£o:${NC}"
echo "   1. Ativar sistema de plugins (ver README)"
echo "   2. Configurar language servers para LSP"
echo "   3. Personalizar keybindings para workflow"

echo
echo "üìñ DOCUMENTA√á√ÉO COMPLETA: /home/joao/config/vim-README.md"
echo "üîß Para implementar melhorias, siga o roteiro no README"
echo
echo "Diagn√≥stico conclu√≠do em $(date)"
